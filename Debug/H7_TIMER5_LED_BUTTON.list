
H7_TIMER5_LED_BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002a8c  08002a8c  00003a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a9c  08002a9c  00003a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002aa0  08002aa0  00003aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08002aa4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  24000010  08002ab4  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000080  08002ab4  00004080  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cf3c  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000019ee  00000000  00000000  00010f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bb0  00000000  00000000  00012968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000906  00000000  00000000  00013518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000361a2  00000000  00000000  00013e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d42c  00000000  00000000  00049fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015d3ef  00000000  00000000  000573ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b47db  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030c8  00000000  00000000  001b4820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000076  00000000  00000000  001b78e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002a74 	.word	0x08002a74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002a74 	.word	0x08002a74

080002d8 <HAL_TIM_PeriodElapsedCallback>:
void HandleButton(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2 && system_active) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80002e8:	d12c      	bne.n	8000344 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80002ea:	4b18      	ldr	r3, [pc, #96]	@ (800034c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d027      	beq.n	8000344 <HAL_TIM_PeriodElapsedCallback+0x6c>
    led_state ^= 1;
 80002f4:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	f083 0301 	eor.w	r3, r3, #1
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	4b13      	ldr	r3, [pc, #76]	@ (8000350 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000302:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, led_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000304:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	2b00      	cmp	r3, #0
 800030c:	bf14      	ite	ne
 800030e:	2301      	movne	r3, #1
 8000310:	2300      	moveq	r3, #0
 8000312:	b2db      	uxtb	r3, r3
 8000314:	461a      	mov	r2, r3
 8000316:	2101      	movs	r1, #1
 8000318:	480e      	ldr	r0, [pc, #56]	@ (8000354 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800031a:	f000 febf 	bl	800109c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, led_state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800031e:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	bf0c      	ite	eq
 8000328:	2301      	moveq	r3, #1
 800032a:	2300      	movne	r3, #0
 800032c:	b2db      	uxtb	r3, r3
 800032e:	461a      	mov	r2, r3
 8000330:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000334:	4807      	ldr	r0, [pc, #28]	@ (8000354 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000336:	f000 feb1 	bl	800109c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2102      	movs	r1, #2
 800033e:	4806      	ldr	r0, [pc, #24]	@ (8000358 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000340:	f000 feac 	bl	800109c <HAL_GPIO_WritePin>
  }
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	24000079 	.word	0x24000079
 8000350:	24000078 	.word	0x24000078
 8000354:	58020400 	.word	0x58020400
 8000358:	58021000 	.word	0x58021000

0800035c <HandleButton>:

void HandleButton(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin) == GPIO_PIN_SET) {
 8000360:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000364:	481c      	ldr	r0, [pc, #112]	@ (80003d8 <HandleButton+0x7c>)
 8000366:	f000 fe81 	bl	800106c <HAL_GPIO_ReadPin>
 800036a:	4603      	mov	r3, r0
 800036c:	2b01      	cmp	r3, #1
 800036e:	d130      	bne.n	80003d2 <HandleButton+0x76>
    HAL_Delay(50); // Debounce
 8000370:	2032      	movs	r0, #50	@ 0x32
 8000372:	f000 fb8b 	bl	8000a8c <HAL_Delay>
    if (HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin) == GPIO_PIN_SET) {
 8000376:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800037a:	4817      	ldr	r0, [pc, #92]	@ (80003d8 <HandleButton+0x7c>)
 800037c:	f000 fe76 	bl	800106c <HAL_GPIO_ReadPin>
 8000380:	4603      	mov	r3, r0
 8000382:	2b01      	cmp	r3, #1
 8000384:	d125      	bne.n	80003d2 <HandleButton+0x76>
      system_active ^= 1; // Alterna o estado do sistema
 8000386:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <HandleButton+0x80>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	f083 0301 	eor.w	r3, r3, #1
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <HandleButton+0x80>)
 8000394:	701a      	strb	r2, [r3, #0]

      // Se sistema foi desativado, apaga todos os LEDs
      if (!system_active) {
 8000396:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <HandleButton+0x80>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2b00      	cmp	r3, #0
 800039e:	d10f      	bne.n	80003c0 <HandleButton+0x64>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2101      	movs	r1, #1
 80003a4:	480e      	ldr	r0, [pc, #56]	@ (80003e0 <HandleButton+0x84>)
 80003a6:	f000 fe79 	bl	800109c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003b0:	480b      	ldr	r0, [pc, #44]	@ (80003e0 <HandleButton+0x84>)
 80003b2:	f000 fe73 	bl	800109c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2102      	movs	r1, #2
 80003ba:	480a      	ldr	r0, [pc, #40]	@ (80003e4 <HandleButton+0x88>)
 80003bc:	f000 fe6e 	bl	800109c <HAL_GPIO_WritePin>
      }

      // Aguarda bot√£o ser solto
      while (HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin) == GPIO_PIN_SET);
 80003c0:	bf00      	nop
 80003c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c6:	4804      	ldr	r0, [pc, #16]	@ (80003d8 <HandleButton+0x7c>)
 80003c8:	f000 fe50 	bl	800106c <HAL_GPIO_ReadPin>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d0f7      	beq.n	80003c2 <HandleButton+0x66>
    }
  }
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	58020800 	.word	0x58020800
 80003dc:	24000079 	.word	0x24000079
 80003e0:	58020400 	.word	0x58020400
 80003e4:	58021000 	.word	0x58021000

080003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80003ec:	f000 fabc 	bl	8000968 <HAL_Init>
  SystemClock_Config();
 80003f0:	f000 f824 	bl	800043c <SystemClock_Config>
  MX_GPIO_Init();
 80003f4:	f000 f8da 	bl	80005ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80003f8:	f000 f88a 	bl	8000510 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <main+0x48>)
 80003fe:	f001 fe83 	bl	8002108 <HAL_TIM_Base_Start_IT>

  // Inicia com todos os LEDs desligados
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2101      	movs	r1, #1
 8000406:	480b      	ldr	r0, [pc, #44]	@ (8000434 <main+0x4c>)
 8000408:	f000 fe48 	bl	800109c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000412:	4808      	ldr	r0, [pc, #32]	@ (8000434 <main+0x4c>)
 8000414:	f000 fe42 	bl	800109c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2102      	movs	r1, #2
 800041c:	4806      	ldr	r0, [pc, #24]	@ (8000438 <main+0x50>)
 800041e:	f000 fe3d 	bl	800109c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HandleButton();
 8000422:	f7ff ff9b 	bl	800035c <HandleButton>
    HAL_Delay(10);
 8000426:	200a      	movs	r0, #10
 8000428:	f000 fb30 	bl	8000a8c <HAL_Delay>
    HandleButton();
 800042c:	bf00      	nop
 800042e:	e7f8      	b.n	8000422 <main+0x3a>
 8000430:	2400002c 	.word	0x2400002c
 8000434:	58020400 	.word	0x58020400
 8000438:	58021000 	.word	0x58021000

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b09c      	sub	sp, #112	@ 0x70
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000446:	224c      	movs	r2, #76	@ 0x4c
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f002 fae6 	bl	8002a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2220      	movs	r2, #32
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f002 fae0 	bl	8002a1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800045c:	2002      	movs	r0, #2
 800045e:	f000 fe37 	bl	80010d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000462:	2300      	movs	r3, #0
 8000464:	603b      	str	r3, [r7, #0]
 8000466:	4b28      	ldr	r3, [pc, #160]	@ (8000508 <SystemClock_Config+0xcc>)
 8000468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800046a:	4a27      	ldr	r2, [pc, #156]	@ (8000508 <SystemClock_Config+0xcc>)
 800046c:	f023 0301 	bic.w	r3, r3, #1
 8000470:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000472:	4b25      	ldr	r3, [pc, #148]	@ (8000508 <SystemClock_Config+0xcc>)
 8000474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	4b23      	ldr	r3, [pc, #140]	@ (800050c <SystemClock_Config+0xd0>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000484:	4a21      	ldr	r2, [pc, #132]	@ (800050c <SystemClock_Config+0xd0>)
 8000486:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <SystemClock_Config+0xd0>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000494:	603b      	str	r3, [r7, #0]
 8000496:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000498:	bf00      	nop
 800049a:	4b1c      	ldr	r3, [pc, #112]	@ (800050c <SystemClock_Config+0xd0>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004a6:	d1f8      	bne.n	800049a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a8:	2302      	movs	r3, #2
 80004aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004ac:	2301      	movs	r3, #1
 80004ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b0:	2340      	movs	r3, #64	@ 0x40
 80004b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fe41 	bl	8001144 <HAL_RCC_OscConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004c8:	f000 f8ea 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	233f      	movs	r3, #63	@ 0x3f
 80004ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2101      	movs	r1, #1
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 fa81 	bl	80019f8 <HAL_RCC_ClockConfig>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80004fc:	f000 f8d0 	bl	80006a0 <Error_Handler>
  }
}
 8000500:	bf00      	nop
 8000502:	3770      	adds	r7, #112	@ 0x70
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	58000400 	.word	0x58000400
 800050c:	58024800 	.word	0x58024800

08000510 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800052e:	4b1e      	ldr	r3, [pc, #120]	@ (80005a8 <MX_TIM2_Init+0x98>)
 8000530:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000534:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000 - 1;  // Dividindo o clock (16MHz) para 2kHz
 8000536:	4b1c      	ldr	r3, [pc, #112]	@ (80005a8 <MX_TIM2_Init+0x98>)
 8000538:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800053c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053e:	4b1a      	ldr	r3, [pc, #104]	@ (80005a8 <MX_TIM2_Init+0x98>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;     // Interrup√ß√£o a cada 500ms
 8000544:	4b18      	ldr	r3, [pc, #96]	@ (80005a8 <MX_TIM2_Init+0x98>)
 8000546:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800054a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <MX_TIM2_Init+0x98>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <MX_TIM2_Init+0x98>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000558:	4813      	ldr	r0, [pc, #76]	@ (80005a8 <MX_TIM2_Init+0x98>)
 800055a:	f001 fd7d 	bl	8002058 <HAL_TIM_Base_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000564:	f000 f89c 	bl	80006a0 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800056c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	480c      	ldr	r0, [pc, #48]	@ (80005a8 <MX_TIM2_Init+0x98>)
 8000576:	f001 ff47 	bl	8002408 <HAL_TIM_ConfigClockSource>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000580:	f000 f88e 	bl	80006a0 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_TIM2_Init+0x98>)
 8000592:	f002 f997 	bl	80028c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800059c:	f000 f880 	bl	80006a0 <Error_Handler>
  }
}
 80005a0:	bf00      	nop
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2400002c 	.word	0x2400002c

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b33      	ldr	r3, [pc, #204]	@ (8000690 <MX_GPIO_Init+0xe4>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c8:	4a31      	ldr	r2, [pc, #196]	@ (8000690 <MX_GPIO_Init+0xe4>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <MX_GPIO_Init+0xe4>)
 80005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <MX_GPIO_Init+0xe4>)
 80005e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <MX_GPIO_Init+0xe4>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <MX_GPIO_Init+0xe4>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fe:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <MX_GPIO_Init+0xe4>)
 8000600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000604:	4a22      	ldr	r2, [pc, #136]	@ (8000690 <MX_GPIO_Init+0xe4>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060e:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <MX_GPIO_Init+0xe4>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000614:	f003 0310 	and.w	r3, r3, #16
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000622:	481c      	ldr	r0, [pc, #112]	@ (8000694 <MX_GPIO_Init+0xe8>)
 8000624:	f000 fd3a 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2102      	movs	r1, #2
 800062c:	481a      	ldr	r0, [pc, #104]	@ (8000698 <MX_GPIO_Init+0xec>)
 800062e:	f000 fd35 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 8000632:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800063c:	2302      	movs	r3, #2
 800063e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	4815      	ldr	r0, [pc, #84]	@ (800069c <MX_GPIO_Init+0xf0>)
 8000648:	f000 fb60 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800064c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4619      	mov	r1, r3
 8000664:	480b      	ldr	r0, [pc, #44]	@ (8000694 <MX_GPIO_Init+0xe8>)
 8000666:	f000 fb51 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800066a:	2302      	movs	r3, #2
 800066c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_GPIO_Init+0xec>)
 8000682:	f000 fb43 	bl	8000d0c <HAL_GPIO_Init>
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	58024400 	.word	0x58024400
 8000694:	58020400 	.word	0x58020400
 8000698:	58021000 	.word	0x58021000
 800069c:	58020800 	.word	0x58020800

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <Error_Handler+0x8>

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <HAL_MspInit+0x30>)
 80006b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006b8:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <HAL_MspInit+0x30>)
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_MspInit+0x30>)
 80006c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006c8:	f003 0302 	and.w	r3, r3, #2
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	58024400 	.word	0x58024400

080006e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006f0:	d116      	bne.n	8000720 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <HAL_TIM_Base_MspInit+0x48>)
 80006f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <HAL_TIM_Base_MspInit+0x48>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <HAL_TIM_Base_MspInit+0x48>)
 8000704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	201c      	movs	r0, #28
 8000716:	f000 fac4 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800071a:	201c      	movs	r0, #28
 800071c:	f000 fadb 	bl	8000cd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	58024400 	.word	0x58024400

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <NMI_Handler+0x4>

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <UsageFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000782:	f000 f963 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000790:	4802      	ldr	r0, [pc, #8]	@ (800079c <TIM2_IRQHandler+0x10>)
 8000792:	f001 fd31 	bl	80021f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2400002c 	.word	0x2400002c

080007a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007a4:	4b43      	ldr	r3, [pc, #268]	@ (80008b4 <SystemInit+0x114>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007aa:	4a42      	ldr	r2, [pc, #264]	@ (80008b4 <SystemInit+0x114>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007b4:	4b40      	ldr	r3, [pc, #256]	@ (80008b8 <SystemInit+0x118>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f003 030f 	and.w	r3, r3, #15
 80007bc:	2b06      	cmp	r3, #6
 80007be:	d807      	bhi.n	80007d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007c0:	4b3d      	ldr	r3, [pc, #244]	@ (80008b8 <SystemInit+0x118>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f023 030f 	bic.w	r3, r3, #15
 80007c8:	4a3b      	ldr	r2, [pc, #236]	@ (80008b8 <SystemInit+0x118>)
 80007ca:	f043 0307 	orr.w	r3, r3, #7
 80007ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007d0:	4b3a      	ldr	r3, [pc, #232]	@ (80008bc <SystemInit+0x11c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a39      	ldr	r2, [pc, #228]	@ (80008bc <SystemInit+0x11c>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007dc:	4b37      	ldr	r3, [pc, #220]	@ (80008bc <SystemInit+0x11c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007e2:	4b36      	ldr	r3, [pc, #216]	@ (80008bc <SystemInit+0x11c>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4935      	ldr	r1, [pc, #212]	@ (80008bc <SystemInit+0x11c>)
 80007e8:	4b35      	ldr	r3, [pc, #212]	@ (80008c0 <SystemInit+0x120>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ee:	4b32      	ldr	r3, [pc, #200]	@ (80008b8 <SystemInit+0x118>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d007      	beq.n	800080a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007fa:	4b2f      	ldr	r3, [pc, #188]	@ (80008b8 <SystemInit+0x118>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f023 030f 	bic.w	r3, r3, #15
 8000802:	4a2d      	ldr	r2, [pc, #180]	@ (80008b8 <SystemInit+0x118>)
 8000804:	f043 0307 	orr.w	r3, r3, #7
 8000808:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800080a:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <SystemInit+0x11c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000810:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <SystemInit+0x11c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000816:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <SystemInit+0x11c>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800081c:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <SystemInit+0x11c>)
 800081e:	4a29      	ldr	r2, [pc, #164]	@ (80008c4 <SystemInit+0x124>)
 8000820:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <SystemInit+0x11c>)
 8000824:	4a28      	ldr	r2, [pc, #160]	@ (80008c8 <SystemInit+0x128>)
 8000826:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <SystemInit+0x11c>)
 800082a:	4a28      	ldr	r2, [pc, #160]	@ (80008cc <SystemInit+0x12c>)
 800082c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <SystemInit+0x11c>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000834:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <SystemInit+0x11c>)
 8000836:	4a25      	ldr	r2, [pc, #148]	@ (80008cc <SystemInit+0x12c>)
 8000838:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800083a:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <SystemInit+0x11c>)
 800083c:	2200      	movs	r2, #0
 800083e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <SystemInit+0x11c>)
 8000842:	4a22      	ldr	r2, [pc, #136]	@ (80008cc <SystemInit+0x12c>)
 8000844:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <SystemInit+0x11c>)
 8000848:	2200      	movs	r2, #0
 800084a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <SystemInit+0x11c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1a      	ldr	r2, [pc, #104]	@ (80008bc <SystemInit+0x11c>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <SystemInit+0x11c>)
 800085a:	2200      	movs	r2, #0
 800085c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <SystemInit+0x130>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <SystemInit+0x134>)
 8000864:	4013      	ands	r3, r2
 8000866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800086a:	d202      	bcs.n	8000872 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <SystemInit+0x138>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <SystemInit+0x11c>)
 8000874:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800087c:	2b00      	cmp	r3, #0
 800087e:	d113      	bne.n	80008a8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <SystemInit+0x11c>)
 8000882:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000886:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <SystemInit+0x11c>)
 8000888:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800088c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <SystemInit+0x13c>)
 8000892:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000896:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <SystemInit+0x11c>)
 800089a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <SystemInit+0x11c>)
 80008a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008a4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00
 80008b8:	52002000 	.word	0x52002000
 80008bc:	58024400 	.word	0x58024400
 80008c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008c4:	02020200 	.word	0x02020200
 80008c8:	01ff0000 	.word	0x01ff0000
 80008cc:	01010280 	.word	0x01010280
 80008d0:	5c001000 	.word	0x5c001000
 80008d4:	ffff0000 	.word	0xffff0000
 80008d8:	51008108 	.word	0x51008108
 80008dc:	52004000 	.word	0x52004000

080008e0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <ExitRun0Mode+0x2c>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	4a08      	ldr	r2, [pc, #32]	@ (800090c <ExitRun0Mode+0x2c>)
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80008f0:	bf00      	nop
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <ExitRun0Mode+0x2c>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f9      	beq.n	80008f2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	58024800 	.word	0x58024800

08000910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000910:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800094c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000914:	f7ff ffe4 	bl	80008e0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000918:	f7ff ff42 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	@ (8000954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	@ (8000960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f002 f873 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000946:	f7ff fd4f 	bl	80003e8 <main>
  bx  lr
 800094a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800094c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000950:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000954:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000958:	08002aa4 	.word	0x08002aa4
  ldr r2, =_sbss
 800095c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000960:	24000080 	.word	0x24000080

08000964 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC3_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096e:	2003      	movs	r0, #3
 8000970:	f000 f98c 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000974:	f001 f9f6 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8000978:	4602      	mov	r2, r0
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <HAL_Init+0x68>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	f003 030f 	and.w	r3, r3, #15
 8000984:	4913      	ldr	r1, [pc, #76]	@ (80009d4 <HAL_Init+0x6c>)
 8000986:	5ccb      	ldrb	r3, [r1, r3]
 8000988:	f003 031f 	and.w	r3, r3, #31
 800098c:	fa22 f303 	lsr.w	r3, r2, r3
 8000990:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <HAL_Init+0x68>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	4a0e      	ldr	r2, [pc, #56]	@ (80009d4 <HAL_Init+0x6c>)
 800099c:	5cd3      	ldrb	r3, [r2, r3]
 800099e:	f003 031f 	and.w	r3, r3, #31
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	fa22 f303 	lsr.w	r3, r2, r3
 80009a8:	4a0b      	ldr	r2, [pc, #44]	@ (80009d8 <HAL_Init+0x70>)
 80009aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009ac:	4a0b      	ldr	r2, [pc, #44]	@ (80009dc <HAL_Init+0x74>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b2:	200f      	movs	r0, #15
 80009b4:	f000 f814 	bl	80009e0 <HAL_InitTick>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e002      	b.n	80009c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009c2:	f7ff fe73 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	58024400 	.word	0x58024400
 80009d4:	08002a8c 	.word	0x08002a8c
 80009d8:	24000004 	.word	0x24000004
 80009dc:	24000000 	.word	0x24000000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009e8:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <HAL_InitTick+0x60>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d101      	bne.n	80009f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e021      	b.n	8000a38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <HAL_InitTick+0x64>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <HAL_InitTick+0x60>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f971 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f93b 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <HAL_InitTick+0x68>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2400000c 	.word	0x2400000c
 8000a44:	24000000 	.word	0x24000000
 8000a48:	24000008 	.word	0x24000008

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	2400000c 	.word	0x2400000c
 8000a70:	2400007c 	.word	0x2400007c

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2400007c 	.word	0x2400007c

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff ffee 	bl	8000a74 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffde 	bl	8000a74 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2400000c 	.word	0x2400000c

08000ad4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <HAL_GetREVID+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	0c1b      	lsrs	r3, r3, #16
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	5c001000 	.word	0x5c001000

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <__NVIC_SetPriorityGrouping+0x40>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	4313      	orrs	r3, r2
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	@ (8000b2c <__NVIC_SetPriorityGrouping+0x40>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	05fa0000 	.word	0x05fa0000

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <__NVIC_EnableIRQ+0x38>)
 8000b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	@ 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff29 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff40 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff90 	bl	8000be0 <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5f 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff33 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffa4 	bl	8000c48 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	@ 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d1a:	4b89      	ldr	r3, [pc, #548]	@ (8000f40 <HAL_GPIO_Init+0x234>)
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d1e:	e194      	b.n	800104a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8186 	beq.w	8001044 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d005      	beq.n	8000d50 <HAL_GPIO_Init+0x44>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	f003 0201 	and.w	r2, r3, #1
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d017      	beq.n	8000dee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d123      	bne.n	8000e42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	69b9      	ldr	r1, [r7, #24]
 8000e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0203 	and.w	r2, r3, #3
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80e0 	beq.w	8001044 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e84:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <HAL_GPIO_Init+0x238>)
 8000e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f44 <HAL_GPIO_Init+0x238>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e94:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <HAL_GPIO_Init+0x238>)
 8000e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea2:	4a29      	ldr	r2, [pc, #164]	@ (8000f48 <HAL_GPIO_Init+0x23c>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a20      	ldr	r2, [pc, #128]	@ (8000f4c <HAL_GPIO_Init+0x240>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d052      	beq.n	8000f74 <HAL_GPIO_Init+0x268>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f50 <HAL_GPIO_Init+0x244>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d031      	beq.n	8000f3a <HAL_GPIO_Init+0x22e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f54 <HAL_GPIO_Init+0x248>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d02b      	beq.n	8000f36 <HAL_GPIO_Init+0x22a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f58 <HAL_GPIO_Init+0x24c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x226>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <HAL_GPIO_Init+0x250>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x222>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f60 <HAL_GPIO_Init+0x254>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x21e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f64 <HAL_GPIO_Init+0x258>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x21a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a19      	ldr	r2, [pc, #100]	@ (8000f68 <HAL_GPIO_Init+0x25c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x216>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <HAL_GPIO_Init+0x260>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x212>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a17      	ldr	r2, [pc, #92]	@ (8000f70 <HAL_GPIO_Init+0x264>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x20e>
 8000f16:	2309      	movs	r3, #9
 8000f18:	e02d      	b.n	8000f76 <HAL_GPIO_Init+0x26a>
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	e02b      	b.n	8000f76 <HAL_GPIO_Init+0x26a>
 8000f1e:	2308      	movs	r3, #8
 8000f20:	e029      	b.n	8000f76 <HAL_GPIO_Init+0x26a>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e027      	b.n	8000f76 <HAL_GPIO_Init+0x26a>
 8000f26:	2306      	movs	r3, #6
 8000f28:	e025      	b.n	8000f76 <HAL_GPIO_Init+0x26a>
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	e023      	b.n	8000f76 <HAL_GPIO_Init+0x26a>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e021      	b.n	8000f76 <HAL_GPIO_Init+0x26a>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e01f      	b.n	8000f76 <HAL_GPIO_Init+0x26a>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e01d      	b.n	8000f76 <HAL_GPIO_Init+0x26a>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e01b      	b.n	8000f76 <HAL_GPIO_Init+0x26a>
 8000f3e:	bf00      	nop
 8000f40:	58000080 	.word	0x58000080
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58000400 	.word	0x58000400
 8000f4c:	58020000 	.word	0x58020000
 8000f50:	58020400 	.word	0x58020400
 8000f54:	58020800 	.word	0x58020800
 8000f58:	58020c00 	.word	0x58020c00
 8000f5c:	58021000 	.word	0x58021000
 8000f60:	58021400 	.word	0x58021400
 8000f64:	58021800 	.word	0x58021800
 8000f68:	58021c00 	.word	0x58021c00
 8000f6c:	58022000 	.word	0x58022000
 8000f70:	58022400 	.word	0x58022400
 8000f74:	2300      	movs	r3, #0
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	f002 0203 	and.w	r2, r2, #3
 8000f7c:	0092      	lsls	r2, r2, #2
 8000f7e:	4093      	lsls	r3, r2
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f86:	4938      	ldr	r1, [pc, #224]	@ (8001068 <HAL_GPIO_Init+0x35c>)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000fba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fe8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	3301      	adds	r3, #1
 8001048:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f ae63 	bne.w	8000d20 <HAL_GPIO_Init+0x14>
  }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	3724      	adds	r7, #36	@ 0x24
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	58000400 	.word	0x58000400

0800106c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e001      	b.n	800108e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80010b8:	e003      	b.n	80010c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	619a      	str	r2, [r3, #24]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <HAL_PWREx_ConfigSupply+0x70>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d00a      	beq.n	80010fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_PWREx_ConfigSupply+0x70>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d001      	beq.n	80010f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e01f      	b.n	8001136 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e01d      	b.n	8001136 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_PWREx_ConfigSupply+0x70>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f023 0207 	bic.w	r2, r3, #7
 8001102:	490f      	ldr	r1, [pc, #60]	@ (8001140 <HAL_PWREx_ConfigSupply+0x70>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4313      	orrs	r3, r2
 8001108:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800110a:	f7ff fcb3 	bl	8000a74 <HAL_GetTick>
 800110e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001110:	e009      	b.n	8001126 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001112:	f7ff fcaf 	bl	8000a74 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001120:	d901      	bls.n	8001126 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e007      	b.n	8001136 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_PWREx_ConfigSupply+0x70>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800112e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001132:	d1ee      	bne.n	8001112 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	58024800 	.word	0x58024800

08001144 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	@ 0x30
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	f000 bc48 	b.w	80019e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 8088 	beq.w	8001276 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001166:	4b99      	ldr	r3, [pc, #612]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001170:	4b96      	ldr	r3, [pc, #600]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001178:	2b10      	cmp	r3, #16
 800117a:	d007      	beq.n	800118c <HAL_RCC_OscConfig+0x48>
 800117c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117e:	2b18      	cmp	r3, #24
 8001180:	d111      	bne.n	80011a6 <HAL_RCC_OscConfig+0x62>
 8001182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d10c      	bne.n	80011a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	4b8f      	ldr	r3, [pc, #572]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d06d      	beq.n	8001274 <HAL_RCC_OscConfig+0x130>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d169      	bne.n	8001274 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	f000 bc21 	b.w	80019e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x7a>
 80011b0:	4b86      	ldr	r3, [pc, #536]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a85      	ldr	r2, [pc, #532]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80011b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	e02e      	b.n	800121c <HAL_RCC_OscConfig+0xd8>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x9c>
 80011c6:	4b81      	ldr	r3, [pc, #516]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a80      	ldr	r2, [pc, #512]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80011cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b7e      	ldr	r3, [pc, #504]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a7d      	ldr	r2, [pc, #500]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80011d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e01d      	b.n	800121c <HAL_RCC_OscConfig+0xd8>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0xc0>
 80011ea:	4b78      	ldr	r3, [pc, #480]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a77      	ldr	r2, [pc, #476]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80011f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b75      	ldr	r3, [pc, #468]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a74      	ldr	r2, [pc, #464]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e00b      	b.n	800121c <HAL_RCC_OscConfig+0xd8>
 8001204:	4b71      	ldr	r3, [pc, #452]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a70      	ldr	r2, [pc, #448]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 800120a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b6e      	ldr	r3, [pc, #440]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a6d      	ldr	r2, [pc, #436]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800121a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fc26 	bl	8000a74 <HAL_GetTick>
 8001228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fc22 	bl	8000a74 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	@ 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e3d4      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800123e:	4b63      	ldr	r3, [pc, #396]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0xe8>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fc12 	bl	8000a74 <HAL_GetTick>
 8001250:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fc0e 	bl	8000a74 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	@ 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e3c0      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001266:	4b59      	ldr	r3, [pc, #356]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x110>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80ca 	beq.w	8001418 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001284:	4b51      	ldr	r3, [pc, #324]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800128c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800128e:	4b4f      	ldr	r3, [pc, #316]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001292:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <HAL_RCC_OscConfig+0x166>
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	2b18      	cmp	r3, #24
 800129e:	d156      	bne.n	800134e <HAL_RCC_OscConfig+0x20a>
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d151      	bne.n	800134e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012aa:	4b48      	ldr	r3, [pc, #288]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x17e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e392      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012c2:	4b42      	ldr	r3, [pc, #264]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 0219 	bic.w	r2, r3, #25
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	493f      	ldr	r1, [pc, #252]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fbce 	bl	8000a74 <HAL_GetTick>
 80012d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012dc:	f7ff fbca 	bl	8000a74 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e37c      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ee:	4b37      	ldr	r3, [pc, #220]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	f7ff fbeb 	bl	8000ad4 <HAL_GetREVID>
 80012fe:	4603      	mov	r3, r0
 8001300:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001304:	4293      	cmp	r3, r2
 8001306:	d817      	bhi.n	8001338 <HAL_RCC_OscConfig+0x1f4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	2b40      	cmp	r3, #64	@ 0x40
 800130e:	d108      	bne.n	8001322 <HAL_RCC_OscConfig+0x1de>
 8001310:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001318:	4a2c      	ldr	r2, [pc, #176]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 800131a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001320:	e07a      	b.n	8001418 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	031b      	lsls	r3, r3, #12
 8001330:	4926      	ldr	r1, [pc, #152]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001336:	e06f      	b.n	8001418 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001338:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	4921      	ldr	r1, [pc, #132]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800134c:	e064      	b.n	8001418 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d047      	beq.n	80013e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001356:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 0219 	bic.w	r2, r3, #25
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	491a      	ldr	r1, [pc, #104]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fb84 	bl	8000a74 <HAL_GetTick>
 800136c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fb80 	bl	8000a74 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e332      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	f7ff fba1 	bl	8000ad4 <HAL_GetREVID>
 8001392:	4603      	mov	r3, r0
 8001394:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001398:	4293      	cmp	r3, r2
 800139a:	d819      	bhi.n	80013d0 <HAL_RCC_OscConfig+0x28c>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	2b40      	cmp	r3, #64	@ 0x40
 80013a2:	d108      	bne.n	80013b6 <HAL_RCC_OscConfig+0x272>
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80013ac:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80013ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b2:	6053      	str	r3, [r2, #4]
 80013b4:	e030      	b.n	8001418 <HAL_RCC_OscConfig+0x2d4>
 80013b6:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	031b      	lsls	r3, r3, #12
 80013c4:	4901      	ldr	r1, [pc, #4]	@ (80013cc <HAL_RCC_OscConfig+0x288>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
 80013ca:	e025      	b.n	8001418 <HAL_RCC_OscConfig+0x2d4>
 80013cc:	58024400 	.word	0x58024400
 80013d0:	4b9a      	ldr	r3, [pc, #616]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	4997      	ldr	r1, [pc, #604]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
 80013e4:	e018      	b.n	8001418 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b95      	ldr	r3, [pc, #596]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a94      	ldr	r2, [pc, #592]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff fb3f 	bl	8000a74 <HAL_GetTick>
 80013f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fa:	f7ff fb3b 	bl	8000a74 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e2ed      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800140c:	4b8b      	ldr	r3, [pc, #556]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a9 	beq.w	8001578 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001426:	4b85      	ldr	r3, [pc, #532]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800142e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001430:	4b82      	ldr	r3, [pc, #520]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 8001432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001434:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b08      	cmp	r3, #8
 800143a:	d007      	beq.n	800144c <HAL_RCC_OscConfig+0x308>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b18      	cmp	r3, #24
 8001440:	d13a      	bne.n	80014b8 <HAL_RCC_OscConfig+0x374>
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d135      	bne.n	80014b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800144c:	4b7b      	ldr	r3, [pc, #492]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_OscConfig+0x320>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	2b80      	cmp	r3, #128	@ 0x80
 800145e:	d001      	beq.n	8001464 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e2c1      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001464:	f7ff fb36 	bl	8000ad4 <HAL_GetREVID>
 8001468:	4603      	mov	r3, r0
 800146a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800146e:	4293      	cmp	r3, r2
 8001470:	d817      	bhi.n	80014a2 <HAL_RCC_OscConfig+0x35e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	2b20      	cmp	r3, #32
 8001478:	d108      	bne.n	800148c <HAL_RCC_OscConfig+0x348>
 800147a:	4b70      	ldr	r3, [pc, #448]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001482:	4a6e      	ldr	r2, [pc, #440]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 8001484:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001488:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800148a:	e075      	b.n	8001578 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800148c:	4b6b      	ldr	r3, [pc, #428]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	069b      	lsls	r3, r3, #26
 800149a:	4968      	ldr	r1, [pc, #416]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014a0:	e06a      	b.n	8001578 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014a2:	4b66      	ldr	r3, [pc, #408]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	061b      	lsls	r3, r3, #24
 80014b0:	4962      	ldr	r1, [pc, #392]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014b6:	e05f      	b.n	8001578 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d042      	beq.n	8001546 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014c0:	4b5e      	ldr	r3, [pc, #376]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a5d      	ldr	r2, [pc, #372]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80014c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fad2 	bl	8000a74 <HAL_GetTick>
 80014d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014d4:	f7ff face 	bl	8000a74 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e280      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014e6:	4b55      	ldr	r3, [pc, #340]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014f2:	f7ff faef 	bl	8000ad4 <HAL_GetREVID>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d817      	bhi.n	8001530 <HAL_RCC_OscConfig+0x3ec>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	2b20      	cmp	r3, #32
 8001506:	d108      	bne.n	800151a <HAL_RCC_OscConfig+0x3d6>
 8001508:	4b4c      	ldr	r3, [pc, #304]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001510:	4a4a      	ldr	r2, [pc, #296]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 8001512:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001516:	6053      	str	r3, [r2, #4]
 8001518:	e02e      	b.n	8001578 <HAL_RCC_OscConfig+0x434>
 800151a:	4b48      	ldr	r3, [pc, #288]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	069b      	lsls	r3, r3, #26
 8001528:	4944      	ldr	r1, [pc, #272]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
 800152e:	e023      	b.n	8001578 <HAL_RCC_OscConfig+0x434>
 8001530:	4b42      	ldr	r3, [pc, #264]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	493f      	ldr	r1, [pc, #252]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 8001540:	4313      	orrs	r3, r2
 8001542:	60cb      	str	r3, [r1, #12]
 8001544:	e018      	b.n	8001578 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001546:	4b3d      	ldr	r3, [pc, #244]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a3c      	ldr	r2, [pc, #240]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800154c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fa8f 	bl	8000a74 <HAL_GetTick>
 8001556:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800155a:	f7ff fa8b 	bl	8000a74 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e23d      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800156c:	4b33      	ldr	r3, [pc, #204]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d036      	beq.n	80015f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d019      	beq.n	80015c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800158e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001590:	4a2a      	ldr	r2, [pc, #168]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001598:	f7ff fa6c 	bl	8000a74 <HAL_GetTick>
 800159c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff fa68 	bl	8000a74 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e21a      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015b2:	4b22      	ldr	r3, [pc, #136]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80015b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x45c>
 80015be:	e018      	b.n	80015f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c0:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c4:	4a1d      	ldr	r2, [pc, #116]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015cc:	f7ff fa52 	bl	8000a74 <HAL_GetTick>
 80015d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d4:	f7ff fa4e 	bl	8000a74 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e200      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 80015e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d039      	beq.n	8001672 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01c      	beq.n	8001640 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001606:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a0c      	ldr	r2, [pc, #48]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800160c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001610:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001612:	f7ff fa2f 	bl	8000a74 <HAL_GetTick>
 8001616:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800161a:	f7ff fa2b 	bl	8000a74 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1dd      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800162c:	4b03      	ldr	r3, [pc, #12]	@ (800163c <HAL_RCC_OscConfig+0x4f8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x4d6>
 8001638:	e01b      	b.n	8001672 <HAL_RCC_OscConfig+0x52e>
 800163a:	bf00      	nop
 800163c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001640:	4b9b      	ldr	r3, [pc, #620]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a9a      	ldr	r2, [pc, #616]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001646:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800164a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800164c:	f7ff fa12 	bl	8000a74 <HAL_GetTick>
 8001650:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001654:	f7ff fa0e 	bl	8000a74 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1c0      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001666:	4b92      	ldr	r3, [pc, #584]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8081 	beq.w	8001782 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001680:	4b8c      	ldr	r3, [pc, #560]	@ (80018b4 <HAL_RCC_OscConfig+0x770>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a8b      	ldr	r2, [pc, #556]	@ (80018b4 <HAL_RCC_OscConfig+0x770>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800168a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800168c:	f7ff f9f2 	bl	8000a74 <HAL_GetTick>
 8001690:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001694:	f7ff f9ee 	bl	8000a74 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1a0      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016a6:	4b83      	ldr	r3, [pc, #524]	@ (80018b4 <HAL_RCC_OscConfig+0x770>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d106      	bne.n	80016c8 <HAL_RCC_OscConfig+0x584>
 80016ba:	4b7d      	ldr	r3, [pc, #500]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016be:	4a7c      	ldr	r2, [pc, #496]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c6:	e02d      	b.n	8001724 <HAL_RCC_OscConfig+0x5e0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10c      	bne.n	80016ea <HAL_RCC_OscConfig+0x5a6>
 80016d0:	4b77      	ldr	r3, [pc, #476]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d4:	4a76      	ldr	r2, [pc, #472]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	@ 0x70
 80016dc:	4b74      	ldr	r3, [pc, #464]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e0:	4a73      	ldr	r2, [pc, #460]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e8:	e01c      	b.n	8001724 <HAL_RCC_OscConfig+0x5e0>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x5c8>
 80016f2:	4b6f      	ldr	r3, [pc, #444]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f6:	4a6e      	ldr	r2, [pc, #440]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fe:	4b6c      	ldr	r3, [pc, #432]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	4a6b      	ldr	r2, [pc, #428]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6713      	str	r3, [r2, #112]	@ 0x70
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0x5e0>
 800170c:	4b68      	ldr	r3, [pc, #416]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001710:	4a67      	ldr	r2, [pc, #412]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	@ 0x70
 8001718:	4b65      	ldr	r3, [pc, #404]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171c:	4a64      	ldr	r2, [pc, #400]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 800171e:	f023 0304 	bic.w	r3, r3, #4
 8001722:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d015      	beq.n	8001758 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff f9a2 	bl	8000a74 <HAL_GetTick>
 8001730:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001732:	e00a      	b.n	800174a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001734:	f7ff f99e 	bl	8000a74 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e14e      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800174a:	4b59      	ldr	r3, [pc, #356]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0ee      	beq.n	8001734 <HAL_RCC_OscConfig+0x5f0>
 8001756:	e014      	b.n	8001782 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff f98c 	bl	8000a74 <HAL_GetTick>
 800175c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff f988 	bl	8000a74 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e138      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001776:	4b4e      	ldr	r3, [pc, #312]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ee      	bne.n	8001760 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 812d 	beq.w	80019e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800178c:	4b48      	ldr	r3, [pc, #288]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001794:	2b18      	cmp	r3, #24
 8001796:	f000 80bd 	beq.w	8001914 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	2b02      	cmp	r3, #2
 80017a0:	f040 809e 	bne.w	80018e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a4:	4b42      	ldr	r3, [pc, #264]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a41      	ldr	r2, [pc, #260]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80017aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff f960 	bl	8000a74 <HAL_GetTick>
 80017b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff f95c 	bl	8000a74 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e10e      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ca:	4b39      	ldr	r3, [pc, #228]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d6:	4b36      	ldr	r3, [pc, #216]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80017d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017da:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <HAL_RCC_OscConfig+0x774>)
 80017dc:	4013      	ands	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	430a      	orrs	r2, r1
 80017ea:	4931      	ldr	r1, [pc, #196]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	3b01      	subs	r3, #1
 80017f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017fe:	3b01      	subs	r3, #1
 8001800:	025b      	lsls	r3, r3, #9
 8001802:	b29b      	uxth	r3, r3
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180a:	3b01      	subs	r3, #1
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001818:	3b01      	subs	r3, #1
 800181a:	061b      	lsls	r3, r3, #24
 800181c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001820:	4923      	ldr	r1, [pc, #140]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001822:	4313      	orrs	r3, r2
 8001824:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001826:	4b22      	ldr	r3, [pc, #136]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182a:	4a21      	ldr	r2, [pc, #132]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001832:	4b1f      	ldr	r3, [pc, #124]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001836:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <HAL_RCC_OscConfig+0x778>)
 8001838:	4013      	ands	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800183e:	00d2      	lsls	r2, r2, #3
 8001840:	491b      	ldr	r1, [pc, #108]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001842:	4313      	orrs	r3, r2
 8001844:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001846:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184a:	f023 020c 	bic.w	r2, r3, #12
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	4917      	ldr	r1, [pc, #92]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001858:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 800185a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185c:	f023 0202 	bic.w	r2, r3, #2
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001864:	4912      	ldr	r1, [pc, #72]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001866:	4313      	orrs	r3, r2
 8001868:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 800186c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186e:	4a10      	ldr	r2, [pc, #64]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187a:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800188c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001892:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189a:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_RCC_OscConfig+0x76c>)
 80018a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff f8e5 	bl	8000a74 <HAL_GetTick>
 80018aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ac:	e011      	b.n	80018d2 <HAL_RCC_OscConfig+0x78e>
 80018ae:	bf00      	nop
 80018b0:	58024400 	.word	0x58024400
 80018b4:	58024800 	.word	0x58024800
 80018b8:	fffffc0c 	.word	0xfffffc0c
 80018bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f8d8 	bl	8000a74 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e08a      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018d2:	4b47      	ldr	r3, [pc, #284]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x77c>
 80018de:	e082      	b.n	80019e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e0:	4b43      	ldr	r3, [pc, #268]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a42      	ldr	r2, [pc, #264]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 80018e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f8c2 	bl	8000a74 <HAL_GetTick>
 80018f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f8be 	bl	8000a74 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e070      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001906:	4b3a      	ldr	r3, [pc, #232]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x7b0>
 8001912:	e068      	b.n	80019e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001914:	4b36      	ldr	r3, [pc, #216]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800191a:	4b35      	ldr	r3, [pc, #212]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001924:	2b01      	cmp	r3, #1
 8001926:	d031      	beq.n	800198c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0203 	and.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d12a      	bne.n	800198c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d122      	bne.n	800198c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d11a      	bne.n	800198c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	0a5b      	lsrs	r3, r3, #9
 800195a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001962:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d111      	bne.n	800198c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	0c1b      	lsrs	r3, r3, #16
 800196c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001974:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d108      	bne.n	800198c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	0e1b      	lsrs	r3, r3, #24
 800197e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001986:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e02b      	b.n	80019e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001990:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 8001992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800199a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d01f      	beq.n	80019e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80019a6:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	4a11      	ldr	r2, [pc, #68]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019b2:	f7ff f85f 	bl	8000a74 <HAL_GetTick>
 80019b6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80019b8:	bf00      	nop
 80019ba:	f7ff f85b 	bl	8000a74 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d0f9      	beq.n	80019ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 80019c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019ca:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <HAL_RCC_OscConfig+0x8b0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019d2:	00d2      	lsls	r2, r2, #3
 80019d4:	4906      	ldr	r1, [pc, #24]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 80019dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019de:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_RCC_OscConfig+0x8ac>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3730      	adds	r7, #48	@ 0x30
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	58024400 	.word	0x58024400
 80019f4:	ffff0007 	.word	0xffff0007

080019f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e19c      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b8a      	ldr	r3, [pc, #552]	@ (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d910      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b87      	ldr	r3, [pc, #540]	@ (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 020f 	bic.w	r2, r3, #15
 8001a22:	4985      	ldr	r1, [pc, #532]	@ (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b83      	ldr	r3, [pc, #524]	@ (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e184      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d010      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d908      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a58:	4b78      	ldr	r3, [pc, #480]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	4975      	ldr	r1, [pc, #468]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d010      	beq.n	8001a98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	4b70      	ldr	r3, [pc, #448]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d908      	bls.n	8001a98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a86:	4b6d      	ldr	r3, [pc, #436]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	496a      	ldr	r1, [pc, #424]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d010      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	4b64      	ldr	r3, [pc, #400]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d908      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ab4:	4b61      	ldr	r3, [pc, #388]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	495e      	ldr	r1, [pc, #376]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d010      	beq.n	8001af4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69da      	ldr	r2, [r3, #28]
 8001ad6:	4b59      	ldr	r3, [pc, #356]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d908      	bls.n	8001af4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ae2:	4b56      	ldr	r3, [pc, #344]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4953      	ldr	r1, [pc, #332]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d010      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4b4d      	ldr	r3, [pc, #308]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d908      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	4b4a      	ldr	r3, [pc, #296]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f023 020f 	bic.w	r2, r3, #15
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4947      	ldr	r1, [pc, #284]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d055      	beq.n	8001bda <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b2e:	4b43      	ldr	r3, [pc, #268]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	4940      	ldr	r1, [pc, #256]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d107      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b48:	4b3c      	ldr	r3, [pc, #240]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d121      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0f6      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b60:	4b36      	ldr	r3, [pc, #216]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d115      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0ea      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b78:	4b30      	ldr	r3, [pc, #192]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0de      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b88:	4b2c      	ldr	r3, [pc, #176]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d6      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b98:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f023 0207 	bic.w	r2, r3, #7
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4925      	ldr	r1, [pc, #148]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001baa:	f7fe ff63 	bl	8000a74 <HAL_GetTick>
 8001bae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb2:	f7fe ff5f 	bl	8000a74 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0be      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d1eb      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d010      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d208      	bcs.n	8001c08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f023 020f 	bic.w	r2, r3, #15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	490e      	ldr	r1, [pc, #56]	@ (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d214      	bcs.n	8001c40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 020f 	bic.w	r2, r3, #15
 8001c1e:	4906      	ldr	r1, [pc, #24]	@ (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e086      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
 8001c38:	52002000 	.word	0x52002000
 8001c3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d010      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	4b3f      	ldr	r3, [pc, #252]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d208      	bcs.n	8001c6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	4939      	ldr	r1, [pc, #228]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d010      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	4b34      	ldr	r3, [pc, #208]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d208      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c8a:	4b31      	ldr	r3, [pc, #196]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	492e      	ldr	r1, [pc, #184]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d010      	beq.n	8001cca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	4b28      	ldr	r3, [pc, #160]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d208      	bcs.n	8001cca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cb8:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4922      	ldr	r1, [pc, #136]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d208      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4917      	ldr	r1, [pc, #92]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cf8:	f000 f834 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	4912      	ldr	r1, [pc, #72]	@ (8001d54 <HAL_RCC_ClockConfig+0x35c>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d54 <HAL_RCC_ClockConfig+0x35c>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <HAL_RCC_ClockConfig+0x360>)
 8001d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d30:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_RCC_ClockConfig+0x364>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <HAL_RCC_ClockConfig+0x368>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fe50 	bl	80009e0 <HAL_InitTick>
 8001d40:	4603      	mov	r3, r0
 8001d42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	58024400 	.word	0x58024400
 8001d54:	08002a8c 	.word	0x08002a8c
 8001d58:	24000004 	.word	0x24000004
 8001d5c:	24000000 	.word	0x24000000
 8001d60:	24000008 	.word	0x24000008

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d6a:	4bb3      	ldr	r3, [pc, #716]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d72:	2b18      	cmp	r3, #24
 8001d74:	f200 8155 	bhi.w	8002022 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d78:	a201      	add	r2, pc, #4	@ (adr r2, 8001d80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7e:	bf00      	nop
 8001d80:	08001de5 	.word	0x08001de5
 8001d84:	08002023 	.word	0x08002023
 8001d88:	08002023 	.word	0x08002023
 8001d8c:	08002023 	.word	0x08002023
 8001d90:	08002023 	.word	0x08002023
 8001d94:	08002023 	.word	0x08002023
 8001d98:	08002023 	.word	0x08002023
 8001d9c:	08002023 	.word	0x08002023
 8001da0:	08001e0b 	.word	0x08001e0b
 8001da4:	08002023 	.word	0x08002023
 8001da8:	08002023 	.word	0x08002023
 8001dac:	08002023 	.word	0x08002023
 8001db0:	08002023 	.word	0x08002023
 8001db4:	08002023 	.word	0x08002023
 8001db8:	08002023 	.word	0x08002023
 8001dbc:	08002023 	.word	0x08002023
 8001dc0:	08001e11 	.word	0x08001e11
 8001dc4:	08002023 	.word	0x08002023
 8001dc8:	08002023 	.word	0x08002023
 8001dcc:	08002023 	.word	0x08002023
 8001dd0:	08002023 	.word	0x08002023
 8001dd4:	08002023 	.word	0x08002023
 8001dd8:	08002023 	.word	0x08002023
 8001ddc:	08002023 	.word	0x08002023
 8001de0:	08001e17 	.word	0x08001e17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001de4:	4b94      	ldr	r3, [pc, #592]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d009      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001df0:	4b91      	ldr	r3, [pc, #580]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	4a90      	ldr	r2, [pc, #576]	@ (800203c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e02:	e111      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e04:	4b8d      	ldr	r3, [pc, #564]	@ (800203c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e06:	61bb      	str	r3, [r7, #24]
      break;
 8001e08:	e10e      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e0c:	61bb      	str	r3, [r7, #24]
      break;
 8001e0e:	e10b      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e10:	4b8c      	ldr	r3, [pc, #560]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e12:	61bb      	str	r3, [r7, #24]
      break;
 8001e14:	e108      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e16:	4b88      	ldr	r3, [pc, #544]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e20:	4b85      	ldr	r3, [pc, #532]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e2c:	4b82      	ldr	r3, [pc, #520]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e36:	4b80      	ldr	r3, [pc, #512]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e3a:	08db      	lsrs	r3, r3, #3
 8001e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80e1 	beq.w	800201c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	f000 8083 	beq.w	8001f68 <HAL_RCC_GetSysClockFreq+0x204>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	f200 80a1 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x248>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x114>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d056      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e76:	e099      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e78:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d02d      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e84:	4b6c      	ldr	r3, [pc, #432]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	4a6b      	ldr	r2, [pc, #428]	@ (800203c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eae:	4b62      	ldr	r3, [pc, #392]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ec2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001ede:	e087      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800204c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ef2:	4b51      	ldr	r3, [pc, #324]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f06:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f22:	e065      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002050 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f36:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f4a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f66:	e043      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f72:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002054 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f8e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001faa:	e021      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002050 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fd2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff4:	0a5b      	lsrs	r3, r3, #9
 8001ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002008:	edd7 6a07 	vldr	s13, [r7, #28]
 800200c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002014:	ee17 3a90 	vmov	r3, s15
 8002018:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800201a:	e005      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
      break;
 8002020:	e002      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002024:	61bb      	str	r3, [r7, #24]
      break;
 8002026:	bf00      	nop
  }

  return sysclockfreq;
 8002028:	69bb      	ldr	r3, [r7, #24]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	@ 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	58024400 	.word	0x58024400
 800203c:	03d09000 	.word	0x03d09000
 8002040:	003d0900 	.word	0x003d0900
 8002044:	017d7840 	.word	0x017d7840
 8002048:	46000000 	.word	0x46000000
 800204c:	4c742400 	.word	0x4c742400
 8002050:	4a742400 	.word	0x4a742400
 8002054:	4bbebc20 	.word	0x4bbebc20

08002058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e049      	b.n	80020fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fb2e 	bl	80006e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3304      	adds	r3, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4610      	mov	r0, r2
 8002098:	f000 fad6 	bl	8002648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d001      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e054      	b.n	80021ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a26      	ldr	r2, [pc, #152]	@ (80021d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d022      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x80>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214a:	d01d      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x80>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a22      	ldr	r2, [pc, #136]	@ (80021dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d018      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x80>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a21      	ldr	r2, [pc, #132]	@ (80021e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x80>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1f      	ldr	r2, [pc, #124]	@ (80021e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00e      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x80>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1e      	ldr	r2, [pc, #120]	@ (80021e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x80>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1c      	ldr	r2, [pc, #112]	@ (80021ec <HAL_TIM_Base_Start_IT+0xe4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x80>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1b      	ldr	r2, [pc, #108]	@ (80021f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d115      	bne.n	80021b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_TIM_Base_Start_IT+0xec>)
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d015      	beq.n	80021c6 <HAL_TIM_Base_Start_IT+0xbe>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a0:	d011      	beq.n	80021c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b2:	e008      	b.n	80021c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e000      	b.n	80021c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40010400 	.word	0x40010400
 80021ec:	40001800 	.word	0x40001800
 80021f0:	40014000 	.word	0x40014000
 80021f4:	00010007 	.word	0x00010007

080021f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d020      	beq.n	800225c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01b      	beq.n	800225c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0202 	mvn.w	r2, #2
 800222c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f9e2 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f9d4 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f9e5 	bl	8002620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d020      	beq.n	80022a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01b      	beq.n	80022a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0204 	mvn.w	r2, #4
 8002278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9bc 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f9ae 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f9bf 	bl	8002620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d020      	beq.n	80022f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0208 	mvn.w	r2, #8
 80022c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2204      	movs	r2, #4
 80022ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f996 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 80022e0:	e005      	b.n	80022ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f988 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f999 	bl	8002620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d020      	beq.n	8002340 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0210 	mvn.w	r2, #16
 8002310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2208      	movs	r2, #8
 8002316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f970 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 800232c:	e005      	b.n	800233a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f962 	bl	80025f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f973 	bl	8002620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0201 	mvn.w	r2, #1
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fd ffba 	bl	80002d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236a:	2b00      	cmp	r3, #0
 800236c:	d104      	bne.n	8002378 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00c      	beq.n	8002392 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800238a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fb31 	bl	80029f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00c      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80023ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fb29 	bl	8002a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00c      	beq.n	80023da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f92d 	bl	8002634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00c      	beq.n	80023fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0220 	mvn.w	r2, #32
 80023f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 faf1 	bl	80029e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_TIM_ConfigClockSource+0x1c>
 8002420:	2302      	movs	r3, #2
 8002422:	e0dc      	b.n	80025de <HAL_TIM_ConfigClockSource+0x1d6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	4b6a      	ldr	r3, [pc, #424]	@ (80025e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002440:	4013      	ands	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800244a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a64      	ldr	r2, [pc, #400]	@ (80025ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	f000 80a9 	beq.w	80025b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002460:	4a62      	ldr	r2, [pc, #392]	@ (80025ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	f200 80ae 	bhi.w	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002468:	4a61      	ldr	r2, [pc, #388]	@ (80025f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	f000 80a1 	beq.w	80025b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002470:	4a5f      	ldr	r2, [pc, #380]	@ (80025f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	f200 80a6 	bhi.w	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002478:	4a5e      	ldr	r2, [pc, #376]	@ (80025f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800247a:	4293      	cmp	r3, r2
 800247c:	f000 8099 	beq.w	80025b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002480:	4a5c      	ldr	r2, [pc, #368]	@ (80025f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002482:	4293      	cmp	r3, r2
 8002484:	f200 809e 	bhi.w	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002488:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800248c:	f000 8091 	beq.w	80025b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002490:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002494:	f200 8096 	bhi.w	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800249c:	f000 8089 	beq.w	80025b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80024a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024a4:	f200 808e 	bhi.w	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80024a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ac:	d03e      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x124>
 80024ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024b2:	f200 8087 	bhi.w	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ba:	f000 8086 	beq.w	80025ca <HAL_TIM_ConfigClockSource+0x1c2>
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c2:	d87f      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80024c4:	2b70      	cmp	r3, #112	@ 0x70
 80024c6:	d01a      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0xf6>
 80024c8:	2b70      	cmp	r3, #112	@ 0x70
 80024ca:	d87b      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80024cc:	2b60      	cmp	r3, #96	@ 0x60
 80024ce:	d050      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x16a>
 80024d0:	2b60      	cmp	r3, #96	@ 0x60
 80024d2:	d877      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80024d4:	2b50      	cmp	r3, #80	@ 0x50
 80024d6:	d03c      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0x14a>
 80024d8:	2b50      	cmp	r3, #80	@ 0x50
 80024da:	d873      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80024dc:	2b40      	cmp	r3, #64	@ 0x40
 80024de:	d058      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x18a>
 80024e0:	2b40      	cmp	r3, #64	@ 0x40
 80024e2:	d86f      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80024e4:	2b30      	cmp	r3, #48	@ 0x30
 80024e6:	d064      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80024e8:	2b30      	cmp	r3, #48	@ 0x30
 80024ea:	d86b      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d060      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d867      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05c      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d05a      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80024fc:	e062      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800250e:	f000 f9b9 	bl	8002884 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	609a      	str	r2, [r3, #8]
      break;
 800252a:	e04f      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800253c:	f000 f9a2 	bl	8002884 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800254e:	609a      	str	r2, [r3, #8]
      break;
 8002550:	e03c      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800255e:	461a      	mov	r2, r3
 8002560:	f000 f912 	bl	8002788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2150      	movs	r1, #80	@ 0x50
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f96c 	bl	8002848 <TIM_ITRx_SetConfig>
      break;
 8002570:	e02c      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800257e:	461a      	mov	r2, r3
 8002580:	f000 f931 	bl	80027e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2160      	movs	r1, #96	@ 0x60
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f95c 	bl	8002848 <TIM_ITRx_SetConfig>
      break;
 8002590:	e01c      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800259e:	461a      	mov	r2, r3
 80025a0:	f000 f8f2 	bl	8002788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2140      	movs	r1, #64	@ 0x40
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f94c 	bl	8002848 <TIM_ITRx_SetConfig>
      break;
 80025b0:	e00c      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f000 f943 	bl	8002848 <TIM_ITRx_SetConfig>
      break;
 80025c2:	e003      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      break;
 80025c8:	e000      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80025ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	ffceff88 	.word	0xffceff88
 80025ec:	00100040 	.word	0x00100040
 80025f0:	00100030 	.word	0x00100030
 80025f4:	00100020 	.word	0x00100020

080025f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a43      	ldr	r2, [pc, #268]	@ (8002768 <TIM_Base_SetConfig+0x120>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002666:	d00f      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a40      	ldr	r2, [pc, #256]	@ (800276c <TIM_Base_SetConfig+0x124>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00b      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3f      	ldr	r2, [pc, #252]	@ (8002770 <TIM_Base_SetConfig+0x128>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3e      	ldr	r2, [pc, #248]	@ (8002774 <TIM_Base_SetConfig+0x12c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3d      	ldr	r2, [pc, #244]	@ (8002778 <TIM_Base_SetConfig+0x130>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800268e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a32      	ldr	r2, [pc, #200]	@ (8002768 <TIM_Base_SetConfig+0x120>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026a8:	d01b      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2f      	ldr	r2, [pc, #188]	@ (800276c <TIM_Base_SetConfig+0x124>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d017      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002770 <TIM_Base_SetConfig+0x128>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002774 <TIM_Base_SetConfig+0x12c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00f      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002778 <TIM_Base_SetConfig+0x130>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00b      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a2b      	ldr	r2, [pc, #172]	@ (800277c <TIM_Base_SetConfig+0x134>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002780 <TIM_Base_SetConfig+0x138>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d003      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a29      	ldr	r2, [pc, #164]	@ (8002784 <TIM_Base_SetConfig+0x13c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d108      	bne.n	80026f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a14      	ldr	r2, [pc, #80]	@ (8002768 <TIM_Base_SetConfig+0x120>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00f      	beq.n	800273a <TIM_Base_SetConfig+0xf2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a16      	ldr	r2, [pc, #88]	@ (8002778 <TIM_Base_SetConfig+0x130>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00b      	beq.n	800273a <TIM_Base_SetConfig+0xf2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a15      	ldr	r2, [pc, #84]	@ (800277c <TIM_Base_SetConfig+0x134>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <TIM_Base_SetConfig+0xf2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <TIM_Base_SetConfig+0x138>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d003      	beq.n	800273a <TIM_Base_SetConfig+0xf2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a13      	ldr	r2, [pc, #76]	@ (8002784 <TIM_Base_SetConfig+0x13c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d103      	bne.n	8002742 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f043 0204 	orr.w	r2, r3, #4
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	601a      	str	r2, [r3, #0]
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40010000 	.word	0x40010000
 800276c:	40000400 	.word	0x40000400
 8002770:	40000800 	.word	0x40000800
 8002774:	40000c00 	.word	0x40000c00
 8002778:	40010400 	.word	0x40010400
 800277c:	40014000 	.word	0x40014000
 8002780:	40014400 	.word	0x40014400
 8002784:	40014800 	.word	0x40014800

08002788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0201 	bic.w	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f023 030a 	bic.w	r3, r3, #10
 80027c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	621a      	str	r2, [r3, #32]
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b087      	sub	sp, #28
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f023 0210 	bic.w	r2, r3, #16
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	031b      	lsls	r3, r3, #12
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002822:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	621a      	str	r2, [r3, #32]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <TIM_ITRx_SetConfig+0x38>)
 800285c:	4013      	ands	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	f043 0307 	orr.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	609a      	str	r2, [r3, #8]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	ffcfff8f 	.word	0xffcfff8f

08002884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800289e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	021a      	lsls	r2, r3, #8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	609a      	str	r2, [r3, #8]
}
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028d8:	2302      	movs	r3, #2
 80028da:	e06d      	b.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a30      	ldr	r2, [pc, #192]	@ (80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2f      	ldr	r2, [pc, #188]	@ (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d108      	bne.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002916:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002928:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a20      	ldr	r2, [pc, #128]	@ (80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d022      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294e:	d01d      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1d      	ldr	r2, [pc, #116]	@ (80029cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d018      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1c      	ldr	r2, [pc, #112]	@ (80029d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d013      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1a      	ldr	r2, [pc, #104]	@ (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00e      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a16      	ldr	r2, [pc, #88]	@ (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a15      	ldr	r2, [pc, #84]	@ (80029dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10c      	bne.n	80029a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002992:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	4313      	orrs	r3, r2
 800299c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40010400 	.word	0x40010400
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40000c00 	.word	0x40000c00
 80029d8:	40001800 	.word	0x40001800
 80029dc:	40014000 	.word	0x40014000

080029e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <memset>:
 8002a1c:	4402      	add	r2, r0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d100      	bne.n	8002a26 <memset+0xa>
 8002a24:	4770      	bx	lr
 8002a26:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2a:	e7f9      	b.n	8002a20 <memset+0x4>

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a64 <__libc_init_array+0x38>)
 8002a30:	4c0d      	ldr	r4, [pc, #52]	@ (8002a68 <__libc_init_array+0x3c>)
 8002a32:	1b64      	subs	r4, r4, r5
 8002a34:	10a4      	asrs	r4, r4, #2
 8002a36:	2600      	movs	r6, #0
 8002a38:	42a6      	cmp	r6, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8002a6c <__libc_init_array+0x40>)
 8002a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8002a70 <__libc_init_array+0x44>)
 8002a40:	f000 f818 	bl	8002a74 <_init>
 8002a44:	1b64      	subs	r4, r4, r5
 8002a46:	10a4      	asrs	r4, r4, #2
 8002a48:	2600      	movs	r6, #0
 8002a4a:	42a6      	cmp	r6, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a54:	4798      	blx	r3
 8002a56:	3601      	adds	r6, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5e:	4798      	blx	r3
 8002a60:	3601      	adds	r6, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	08002a9c 	.word	0x08002a9c
 8002a68:	08002a9c 	.word	0x08002a9c
 8002a6c:	08002a9c 	.word	0x08002a9c
 8002a70:	08002aa0 	.word	0x08002aa0

08002a74 <_init>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	bf00      	nop
 8002a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7a:	bc08      	pop	{r3}
 8002a7c:	469e      	mov	lr, r3
 8002a7e:	4770      	bx	lr

08002a80 <_fini>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr
